name: Backend CI

on:
  push:
    paths:
      - 'fullstack/backend/**'
      - 'use-cases/social-network/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'fullstack/backend/**'
      - 'use-cases/social-network/**'
      - '.github/workflows/backend-ci.yml'

jobs:
#  launch-typedb-cloud:
#    name: Launch TypeDB Cloud cluster
#    runs-on: ubuntu-latest
#
#    outputs:
#      address: ${{ steps.launch.outputs.address }}
#      cluster_id: ${{ steps.launch.outputs.cluster_id }}
#
#    steps:
#      - name: Launch Cluster
#        env:
#          TEAM_ID: ${{ vars.TYPEDB_CLOUD_TEAM_ID }}
#          SPACE_ID: ${{ vars.TYPEDB_CLOUD_SPACE_ID }}
#        id: launch
#        run: |
#          CLOUD_API_KEY=$(curl --fail-with-body --request POST \
#            --url https://cloud.typedb.com/api/auth \
#            --header "Authorization: Basic ${{ vars.TYPEDB_CLOUD_CLIENT_ID }}:${{ secrets.TYPEDB_CLOUD_CLIENT_SECRET }}")
#
#          CLUSTER_ID=$(echo ${{ github.sha }} | head -c10)
#
#          echo "Launching $CLUSTER_ID in $TEAM_ID/$SPACE_ID"
#
#          TYPEDB_VERSION="3.5.3"
#          CLUSTER_RES=$(curl --request POST \
#            --url https://cloud.typedb.com/api/team/$TEAM_ID/spaces/$SPACE_ID/clusters/deploy \
#            --header "Authorization: Bearer $CLOUD_API_KEY" \
#            --json "{\"id\":\"$CLUSTER_ID\",\"serverCount\":1,\"storageSizeGB\":10,\"provider\":\"gcp\",\"region\":\"europe-west2\",\"isFree\":false,\"machineType\":\"c2d-highcpu-2\",\"storageType\":\"standard-rwo\",\"version\":\"$TYPEDB_VERSION\",\"backupConfiguration\":{\"frequency\":\"disabled\",\"retentionDays\":7}}")
#
#          while [[ $(echo $CLUSTER_RES | jq -r '.status') != 'running' ]]; do
#            if [[ $(echo $CLUSTER_RES | jq -r '.message') != null ]]; then exit 1; fi
#            echo
#            echo "sleeping"
#            sleep 30
#            CLUSTER_RES=$(curl --request GET \
#              --url https://cloud.typedb.com/api/team/$TEAM_ID/spaces/$SPACE_ID/clusters/$CLUSTER_ID \
#              --header "Authorization: Bearer $CLOUD_API_KEY")
#          done
#
#          ADDRESS=$(echo $CLUSTER_RES | jq -r '.servers[0].address')
#
#          echo "cluster_id=$CLUSTER_ID"
#          echo "cluster_id=$CLUSTER_ID" >> $GITHUB_OUTPUT
#          echo "address=$ADDRESS" >> $GITHUB_OUTPUT

  test-backends:
    name: Test Backend (${{ matrix.backend }})
#    needs: launch-typedb-cloud
    runs-on: ubuntu-latest
#    env:
#      TYPEDB_ADDRESS: ${{ needs.launch-typedb-cloud.outputs.address }}
#      TYPEDB_TLS_ENABLED: "true"
    strategy:
      fail-fast: false
      matrix:
        backend:
          - java
          - python
          - rust
        include:
          - backend: java
            working-directory: fullstack/backend/java
          - backend: python
            working-directory: fullstack/backend/python
          - backend: rust
            working-directory: fullstack/backend/rust

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install TypeDB
      run: |
        curl -sSL https://typedb.com/install.sh | sh
        source ~/.bashrc

    - name: Run TypeDB
      run: |
        export PATH="$HOME/.typedb:$PATH"
        nohup typedb server --development-mode.enabled=true &

    - name: Create and initialise database
      run: |
        export PATH="$HOME/.typedb:$PATH"
        touch emptydata.tql
        typedb console --address=localhost:1729 --tls-disabled --username=admin --password=password --command="database create-init ${{ matrix.backend}} use-cases/social-network/schema.tql emptydata.tql"

    - name: Set up JDK 17 (Java only)
      if: matrix.backend == 'java'
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Python (Python only)
      if: matrix.backend == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Rust (Rust only)
      if: matrix.backend == 'rust'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Install dependencies (Python)
      if: matrix.backend == 'python'
      working-directory: ${{ matrix.working-directory }}
      run: |
        python -m pip install --upgrade pip
        pip3 install -r requirements.txt

    # Run the API tests against the running backend
    - name: Run API tests
      working-directory: ${{ github.workspace }}
      env:
        TYPEDB_DATABASE: ${{ matrix.backend }}
      run: |
        # Start the backend in the background
        cd ${{ matrix.working-directory }}
        case ${{ matrix.backend }} in
          java)
            ./gradlew bootRun &> ${{ github.workspace }}/application-${{ matrix.backend }}.log &
            BACKEND_PID=$!
            ;;
          python)
            python app.py &> ${{ github.workspace }}/application-${{ matrix.backend }}.log &
            BACKEND_PID=$!
            ;;
          rust)
            cargo run &> ${{ github.workspace }}/application-${{ matrix.backend }}.log &
            BACKEND_PID=$!
            ;;
        esac

        # Give the backend time to start
        sleep 60

        # Install test dependencies
        cd ${{ github.workspace }}
        pip install -r fullstack/backend/tests/requirements.txt

        # Run the API tests against the backend
        echo "Running API tests against ${{ matrix.backend }} backend"
        PYTHONPATH=$PYTHONPATH:${{ github.workspace }}/fullstack/backend/tests \
          pytest fullstack/backend/tests/ -v \
          --base-url=http://localhost:8080 \
          --html=test-report-${{ matrix.backend }}.html \
          --self-contained-html

        # Clean up
        kill $BACKEND_PID
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.backend }}
        path: |
          **/test-report-${{ matrix.backend }}.html
          **/application-${{ matrix.backend }}.log
