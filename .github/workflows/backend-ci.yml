name: Backend CI

on:
  push:
    paths:
      - 'fullstack/backend/**'
      - 'use-cases/social-network/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'fullstack/backend/**'
      - 'use-cases/social-network/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  install-typedb-windows:
    name: Install TypeDB on Windows
    runs-on: windows-latest
    steps:
      - name: Install TypeDB
        run: |
          #!/bin/sh

          # TypeDB Installation Script for Mac/Linux

          set -e  # Exit on any error

          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          CYAN='\033[0;36m'
          NC='\033[0m' # No Color

          # Function to print colored output
          print_status() {
              echo -e "${GREEN}$1${NC}"
          }

          print_info() {
              echo -e "${CYAN}$1${NC}"
          }

          print_warning() {
              echo -e "${YELLOW}$1${NC}"
          }

          print_error() {
              echo -e "${RED}$1${NC}"
          }

          # Detect OS and architecture
          detect_platform() {
              local os=""
              local arch=""

              # Detect OS
              case "$(uname -s)" in
                  Darwin)
                      os="mac"
                      ;;
                  Linux)
                      os="linux"
                      ;;
                  MINGW* | MSYS* | CYGWIN*)
                      os="windows"
                      ;;
                  *)
                      print_error "Unsupported operating system: $(uname -s)"
                      exit 1
                      ;;
              esac

              # Detect architecture
              case "$(uname -m)" in
                  x86_64|amd64)
                      arch="x86_64"
                      ;;
                  arm64|aarch64)
                      arch="arm64"
                      ;;
                  *)
                      print_error "Unsupported architecture: $(uname -m)"
                      exit 1
                      ;;
              esac

              echo "${os}-${arch}"
          }

          # Main installation function
          install_typedb() {
              local platform=$(detect_platform)
              local os=$(echo $platform | cut -d'-' -f1)
              local arch=$(echo $platform | cut -d'-' -f2)

              while [ $# -ge 1 ]; do
                  case "$1" in
                      -v|--version)
                          VERSION="$2"
                          shift
                          ;;
                  esac
                  shift
              done

              local ext
              case "$os" in
                  linux) ext="tar.gz";;
                  mac) ext="zip";;
                  windows) ext="zip";;
              esac

              local ver
              local item
              if [ "$VERSION" != "" ]; then
                  ver="$VERSION"
                  item="typedb-all-${platform}-${ver}.${ext}"
              else
                  ver="latest"
                  item="download"
              fi

              print_status "Installing TypeDB ${ver} for $os ($arch)..."

              # Construct download URL
              local download_url="https://repo.typedb.com/public/public-release/raw/names/typedb-all-${platform}/versions/${ver}/${item}"

              # Set installation directory
              local install_dir="$HOME/.typedb"

              # Create installation directory
              mkdir -p "$install_dir"

              # Download and extract
              print_info "Downloading TypeDB..."
              if command -v curl >/dev/null 2>&1; then
                  curl --fail -L "$download_url" -o "/tmp/typedb.${ext}"
              elif command -v wget >/dev/null 2>&1; then
                  wget "$download_url" -O "/tmp/typedb.${ext}"
              else
                  print_error "Neither curl nor wget found. Please install one of them."
                  exit 1
              fi

              print_info "Extracting to $install_dir..."
              tar -xzf "/tmp/typedb.${ext}" -C "$install_dir" --strip-components=1
              rm "/tmp/typedb.${ext}"

              # Make executable
              chmod +x "$install_dir/typedb"

              # Add to PATH
              print_info "Adding to PATH..."

              # Determine shell config file
              local shell_config=""
              case "$SHELL" in
                  *zsh*)
                      shell_config="$HOME/.zshrc"
                      ;;
                  *bash*)
                      shell_config="$HOME/.bashrc"
                      ;;
                  *)
                      if [ -f "$HOME/.zshrc" ]; then
                          shell_config="$HOME/.zshrc"
                      elif [ -f "$HOME/.bashrc" ]; then
                          shell_config="$HOME/.bashrc"
                      elif [ -f "$HOME/.profile" ]; then
                          shell_config="$HOME/.profile"
                      else
                          print_warning "Could not determine shell config file. Please manually add $install_dir to your PATH."
                          shell_config=""
                      fi
                      ;;
              esac

              if [ -n "$shell_config" ]; then
                  # Remove any existing TypeDB PATH entries
                  sed -i.bak '/# TypeDB PATH/d' "$shell_config" 2>/dev/null || true
                  sed -i.bak '\|\.typedb|d' "$shell_config" 2>/dev/null || true

                  # Add new PATH entry
                  echo "" >> "$shell_config"
                  echo "# TypeDB PATH" >> "$shell_config"
                  echo "export PATH=\"\$HOME/.typedb:\$PATH\"" >> "$shell_config"

                  print_info "Added TypeDB to PATH in $shell_config"
              fi

              echo
              print_status "TypeDB installed successfully!"
              echo
              print_info "Get started using the following commands:"
              echo
              echo "  View TypeDB Console CLI options:"
              echo "    typedb console --help"
              echo "  Run a local database server (you'll need to allow network access when prompted):"
              echo "    typedb server"
              echo "  Read the docs:"
              echo "    https://typedb.com/docs/home/get-started/"
              echo
          }

          # Run installation
          install_typedb $@

  launch-typedb-cloud:
    name: Launch TypeDB Cloud cluster
    runs-on: ubuntu-latest

    outputs:
      address: ${{ steps.launch.outputs.address }}
      cluster_id: ${{ steps.launch.outputs.cluster_id }}

    steps:
      - name: Launch Cluster
        env:
          TEAM_ID: ${{ vars.TYPEDB_CLOUD_TEAM_ID }}
          SPACE_ID: ${{ vars.TYPEDB_CLOUD_SPACE_ID }}
        id: launch
        run: |
          CLOUD_API_KEY=$(curl --fail-with-body --request POST \
            --url https://cloud.typedb.com/api/auth \
            --header "Authorization: Basic ${{ vars.TYPEDB_CLOUD_CLIENT_ID }}:${{ secrets.TYPEDB_CLOUD_CLIENT_SECRET }}")
          
          CLUSTER_ID=$(echo ${{ github.sha }} | head -c10)
          
          echo "Launching $CLUSTER_ID in $TEAM_ID/$SPACE_ID"
          
          TYPEDB_VERSION="3.5.3"
          CLUSTER_RES=$(curl --request POST \
            --url https://cloud.typedb.com/api/team/$TEAM_ID/spaces/$SPACE_ID/clusters/deploy \
            --header "Authorization: Bearer $CLOUD_API_KEY" \
            --json "{\"id\":\"$CLUSTER_ID\",\"serverCount\":1,\"storageSizeGB\":10,\"provider\":\"gcp\",\"region\":\"europe-west2\",\"isFree\":false,\"machineType\":\"c2d-highcpu-2\",\"storageType\":\"standard-rwo\",\"version\":\"$TYPEDB_VERSION\",\"backupConfiguration\":{\"frequency\":\"disabled\",\"retentionDays\":7}}")
          
          while [[ $(echo $CLUSTER_RES | jq -r '.status') != 'running' ]]; do 
            if [[ $(echo $CLUSTER_RES | jq -r '.message') != null ]]; then exit 1; fi
            echo
            echo "sleeping"
            sleep 30
            CLUSTER_RES=$(curl --request GET \
              --url https://cloud.typedb.com/api/team/$TEAM_ID/spaces/$SPACE_ID/clusters/$CLUSTER_ID \
              --header "Authorization: Bearer $CLOUD_API_KEY")
          done
          
          ADDRESS=$(echo $CLUSTER_RES | jq -r '.servers[0].address')
          
          echo "cluster_id=$CLUSTER_ID"
          echo "cluster_id=$CLUSTER_ID" >> $GITHUB_OUTPUT
          echo "address=$ADDRESS" >> $GITHUB_OUTPUT

  test-backends:
    name: Test Backend (${{ matrix.backend }})
    needs: launch-typedb-cloud
    runs-on: ubuntu-latest
    env:
      TYPEDB_ADDRESS: ${{ needs.launch-typedb-cloud.outputs.address }}
      TYPEDB_TLS_ENABLED: "true"
    strategy:
      fail-fast: false
      matrix:
        backend:
          - java
          - python
          - rust
        include:
          - backend: java
            working-directory: fullstack/backend/java
          - backend: python
            working-directory: fullstack/backend/python
          - backend: rust
            working-directory: fullstack/backend/rust

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Create and initialise database
      run: |
        curl -sSL https://typedb.com/install.sh | sh && export PATH="$HOME/.typedb:$PATH"
        touch emptydata.tql
        typedb console --address=${{ needs.launch-typedb-cloud.outputs.address }} --username=admin --password=password --command="database create-init ${{ matrix.backend}} use-cases/social-network/schema.tql emptydata.tql"

    - name: Set up JDK 17 (Java only)
      if: matrix.backend == 'java'
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Python (Python only)
      if: matrix.backend == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Rust (Rust only)
      if: matrix.backend == 'rust'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Install dependencies (Python)
      if: matrix.backend == 'python'
      working-directory: ${{ matrix.working-directory }}
      run: |
        python -m pip install --upgrade pip
        pip3 install -r requirements.txt

    # Run the API tests against the running backend
    - name: Run API tests
      working-directory: ${{ github.workspace }}
      env:
        TYPEDB_DATABASE: ${{ matrix.backend }}
      run: |
        # Start the backend in the background
        cd ${{ matrix.working-directory }}
        case ${{ matrix.backend }} in
          java)
            ./gradlew bootRun &> ${{ github.workspace }}/application-${{ matrix.backend }}.log &
            BACKEND_PID=$!
            ;;
          python)
            python app.py &> ${{ github.workspace }}/application-${{ matrix.backend }}.log &
            BACKEND_PID=$!
            ;;
          rust)
            cargo run &> ${{ github.workspace }}/application-${{ matrix.backend }}.log &
            BACKEND_PID=$!
            ;;
        esac

        # Give the backend time to start
        sleep 60

        # Install test dependencies
        cd ${{ github.workspace }}
        pip install -r fullstack/backend/tests/requirements.txt

        # Run the API tests against the backend
        echo "Running API tests against ${{ matrix.backend }} backend"
        PYTHONPATH=$PYTHONPATH:${{ github.workspace }}/fullstack/backend/tests \
          pytest fullstack/backend/tests/ -v \
          --base-url=http://localhost:8080 \
          --html=test-report-${{ matrix.backend }}.html \
          --self-contained-html

        # Clean up
        kill $BACKEND_PID
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.backend }}
        path: |
          **/test-report-${{ matrix.backend }}.html
          **/application-${{ matrix.backend }}.log

  destroy-typedb-cloud:
    name: Destroy TypeDB Cloud cluster
    needs: [launch-typedb-cloud, test-backends]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Destroy Cluster
        env:
          TEAM_ID: ${{ vars.TYPEDB_CLOUD_TEAM_ID }}
          SPACE_ID: ${{ vars.TYPEDB_CLOUD_SPACE_ID }}
          CLUSTER_ID: ${{ needs.launch-typedb-cloud.outputs.cluster_id }}
        id: destroy
        run: |
          CLOUD_API_KEY=$(curl --fail-with-body --request POST \
            --url https://cloud.typedb.com/api/auth \
            --header "Authorization: Basic ${{ vars.TYPEDB_CLOUD_CLIENT_ID }}:${{ secrets.TYPEDB_CLOUD_CLIENT_SECRET }}")
          
          echo "Destroying $CLUSTER_ID in $TEAM_ID/$SPACE_ID"
          
          curl --fail-with-body --request DELETE \
            --url https://cloud.typedb.com/api/team/$TEAM_ID/spaces/$SPACE_ID/clusters/$CLUSTER_ID \
            --header "Authorization: Bearer $CLOUD_API_KEY"
