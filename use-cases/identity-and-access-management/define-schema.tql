#
# Copyright (C) 2023 Vaticle
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

define

#--------------------------------------------------
# Core entity types:

entity subject @abstract,
    owns credential;

entity user @abstract, sub subject;

entity user-group @abstract, sub subject;

entity object @abstract,
    owns object-type;

entity resource  @abstract, sub object;

entity resource-collection @abstract, sub object;

entity action @abstract,
    owns name,
    owns object-type;

entity operation sub action;

entity operation-set sub action;

#--------------------------------------------------
# Membership and ownership relation types:

relation membership @abstract,
    relates parent,
    relates member;

relation group-membership sub membership,
    relates user-group as parent,
    relates group-member as member;


relation collection-membership sub membership,
    relates resource-collection as parent,
    relates collection-member as member;

relation set-membership sub membership,
    relates operation-set as parent,
    relates set-member as member;

user-group plays group-membership:user-group;
subject plays group-membership:group-member;
resource-collection plays collection-membership:resource-collection;
object plays collection-membership:collection-member;
operation-set plays set-membership:operation-set;
action plays set-membership:set-member;

relation ownership @abstract,
    relates owned,
    relates owner;

relation group-ownership sub ownership,
    relates owned-group as owned,
    relates group-owner as owner,
    owns ownership-type;

relation object-ownership sub ownership,
    relates owned-object as owned,
    relates object-owner as owner,
    owns ownership-type;

user-group plays group-ownership:owned-group;
subject plays group-ownership:group-owner;
object plays object-ownership:owned-object;
subject plays object-ownership:object-owner;

#--------------------------------------------------
# Access and permission relation types:

relation access,
    relates accessed-object,
    relates valid-action;

object plays access:accessed-object;
action plays access:valid-action;

relation permission,
    relates permitted-subject,
    relates permitted-access,
    owns review-date,
    owns validity;

subject plays permission:permitted-subject;
access plays permission:permitted-access;

relation change-request,
    relates requesting-subject,
    relates requested-subject,
    relates requested-change;

subject plays change-request:requesting-subject;
subject plays change-request:requested-subject;
access plays change-request:requested-change;

relation access-history,
    relates accessing-subject,
    relates exercised-access,
    owns access-time;

subject plays access-history:accessing-subject;
access plays access-history:exercised-access;

#--------------------------------------------------
# Policy and violation relation types:

relation segregation-policy,
    relates segregated-action,
    owns name;

relation static-segregation-policy sub segregation-policy;

relation dynamic-segregation-policy sub segregation-policy;

action plays segregation-policy:segregated-action;

relation violation @abstract;

relation segregation-violation sub violation,
    relates violating-subject,
    relates violating-object,
    relates violated-policy;

subject plays segregation-violation:violating-subject;
object plays segregation-violation:violating-object;
segregation-policy plays segregation-violation:violated-policy;

#--------------------------------------------------
# Core entity subtypes:

entity employee sub user,
    owns full-name,
    owns email;

entity contractor sub user,
    owns full-name,
    owns email;

entity business-unit sub user-group,
    owns name;

entity user-role sub user-group,
    owns name;

entity user-account sub user-group,
    owns email;

entity file sub resource,
    owns path;

entity purchase-order sub resource,
    owns reference;

entity customer-account sub resource,
    owns email;

entity record sub resource,
    owns primary-key;

entity pull-request sub resource,
    owns hash;

entity directory sub resource-collection,
    owns path;

entity application sub resource-collection,
    owns name;

entity database sub resource-collection,
    owns name;

entity table sub resource-collection,
    owns name;

entity branch sub resource-collection,
    owns name;

entity repository sub resource-collection,
    owns name;

#--------------------------------------------------
# Attribute types:

attribute credential, value string;
attribute object-type, value string;
attribute id, @abstract;
attribute name sub id, value string;
attribute ownership-type, value string;
attribute review-date, value datetime;
attribute validity, value boolean;
attribute email sub id, value string;
attribute path sub id, value string;
attribute reference sub id, value string;
attribute primary-key sub id, value string;
attribute hash sub id, value string;
attribute full-name, value string;
attribute access-time, value datetime;

# #--------------------------------------------------
# # Rules:

# # These rules contain a number of lines that are unnecessary for the rule to function, but add additional context useful
# # for showing explanations in the graph visualiser during this demonstration. When adapting these rules for production,
# # these lines can be safely removed from the rules.

# rule transitive-group-membership:
#     when {
#         (user-group: $g1, group-member: $g2) isa group-membership;
#         (user-group: $g2, group-member: $s) isa! group-membership;
#         $g1 has id $g1-id; # Unnecessary line, see note above.
#         $g2 has id $g2-id; # Unnecessary line, see note above.
#         $s has id $s-id; # Unnecessary line, see note above.
#     } then {
#         (user-group: $g1, group-member: $s) isa inherited-group-membership;
#     };

# rule transitive-collection-membership:
#     when {
#         (resource-collection: $c1, collection-member: $c2) isa collection-membership;
#         (resource-collection: $c2, collection-member: $o) isa! collection-membership;
#         $c1 has id $c1-id; # Unnecessary line, see note above.
#         $c2 has id $c2-id; # Unnecessary line, see note above.
#         $o has id $o-id; # Unnecessary line, see note above.
#     } then {
#         (resource-collection: $c1, collection-member: $o) isa inherited-collection-membership;
#     };

# rule transitive-set-membership:
#     when {
#         (operation-set: $s1, set-member: $s2) isa set-membership;
#         (operation-set: $s2, set-member: $a) isa! set-membership;
#         $s1 has id $s1-id; # Unnecessary line, see note above.
#         $s2 has id $s2-id; # Unnecessary line, see note above.
#         $a has id $a-id; # Unnecessary line, see note above.
#     } then {
#         (operation-set: $s1, set-member: $a) isa inherited-set-membership;
#     };

# rule permission-inheritance:
#     when {
#         $s isa subject;
#         $ac (accessed-object: $o, valid-action: $a) isa access;
#         $ac2 (accessed-object: $o2, valid-action: $a2) isa access;
#         (permitted-subject: $s2, permitted-access: $ac2) isa direct-permission;
#         $s has id $s-id; # Unnecessary line, see note above.
#         $o has id $o-id; # Unnecessary line, see note above.
#         $a has id $a-id; # Unnecessary line, see note above.
#         $s2 has id $s2-id; # Unnecessary line, see note above.
#         $o2 has id $o2-id; # Unnecessary line, see note above.
#         $a2 has id $a2-id; # Unnecessary line, see note above.
#         {
#             (user-group: $s2, group-member: $s) isa group-membership;
#         } or {
#             $s2 is $s;
#         };
#         {
#             (resource-collection: $o2, collection-member: $o) isa collection-membership;
#         } or {
#             $o2 is $o;
#         };
#         {
#             (operation-set: $a2, set-member: $a) isa set-membership;
#         } or {
#             $a2 is $a;
#         };
#     } then {
#         (permitted-subject: $s, permitted-access: $ac) isa inherited-permission;
#     };

# rule static-segregation-violation-detection:
#     when {
#         $po (segregated-action: $a1, segregated-action: $a2) isa static-segregation-policy;
#         $ac1 (accessed-object: $o, valid-action: $a1) isa access;
#         $ac2 (accessed-object: $o, valid-action: $a2) isa access;
#         $p1 (permitted-subject: $s, permitted-access: $ac1) isa permission;
#         $p2 (permitted-subject: $s, permitted-access: $ac2) isa permission;
#         $a1 has id $a1-id; # Unnecessary line, see note above.
#         $a2 has id $a2-id; # Unnecessary line, see note above.
#         $po has id $po-id; # Unnecessary line, see note above.
#         $o has id $o-id; # Unnecessary line, see note above.
#         $s has id $s-id; # Unnecessary line, see note above.
#     } then {
#         (violating-subject: $s, violating-object: $o, violated-policy: $po) isa segregation-violation;
#     };

# rule automatic-permission-invalidity:
#     when {
#         $ac1 (accessed-object: $o, valid-action: $a1) isa access;
#         $ac2 (accessed-object: $o, valid-action: $a2) isa access;
#         $p1 (permitted-subject: $s, permitted-access: $ac1) isa permission;
#         $o has id $o-id; # Unnecessary line, see note above.
#         $a1 has id $a1-id; # Unnecessary line, see note above.
#         $a2 has id $a2-id; # Unnecessary line, see note above.
#         $s has id $s-id; # Unnecessary line, see note above.
#         {
#             $po (segregated-action: $a1, segregated-action: $a2) isa static-segregation-policy;
#             $p2 (permitted-subject: $s, permitted-access: $ac2) isa permission;
#             $po has id $po-id; # Unnecessary line, see note above.
#         } or {
#             $po (segregated-action: $a1, segregated-action: $a2) isa dynamic-segregation-policy;
#             $ah (accessing-subject: $s, exercised-access: $ac2) isa access-history;
#             $po has id $po-id; # Unnecessary line, see note above.
#         };
#     } then {
#         $p1 has validity false;
#     };

# rule automatic-permission-validity:
#     when {
#         $p isa permission;
#         not {
#             $p has validity false;
#         };
#     } then {
#         $p has validity true;
#     };

# #--------------------------------------------------
