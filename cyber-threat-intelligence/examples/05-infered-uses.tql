# Example 05:

# Now let's research the attack we described earlier using the id-unknown and threat-actor stix-id
# This query represents the following question: "Who targets the unknown id and what tool is used?"

match
$t($x, $y) isa targets;
$c($a, $b) isa attributed-to;
$b has stix-id "bravo-threat";
$x has stix-id "bravo-id-unknown";

#--------------------------------------------------
# Exercise 05:

# When we run this query, we get one result, but let's try toggling the inference button at the top to switch on
# TypeDB's rule-inference. Now if we run the query again, we get more attributes as well as a new relation
# shown in a green outline. This is because of a rule encoded into the schema:
# 
# rule transitive-use:
# when {
#     $x isa stix-domain-object;
#     $y isa stix-domain-object;
#     $z isa stix-domain-object;
#     $use1 (using: $x, used: $y) isa uses;
#     $use2 (using: $y, used: $z) isa uses;
# } then {
#     (using: $x, used: $z) isa uses;
# };
# 
# This rule makes uses relationship transitive, so if we know that a threat actor uses an unknown id, and that unknown
# id uses a target, then we can infer that the threat actor uses the target. This is a very powerful feature of TypeDB.
# 

#--------------------------------------------------
