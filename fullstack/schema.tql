# Copyright (C) 2024 Vaticle
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

define
  entity content @abstract,
    owns id @key,
    owns is-visible,
    plays subscription:content;

  entity page @abstract, sub content,
    owns page-id,
    owns name,
    owns bio,
    owns profile-picture,
    owns badge,
    owns is-active,
    plays posting:page,
    plays viewing:viewed,
    plays following:page;

  entity profile @abstract, sub page,
    owns username,
    owns can-publish,
    plays group-membership:member,
    plays location:located,
    plays viewing:viewer,
    plays content-engagement:author,
    plays following:follower,
    plays subscription:subscriber;

  entity person sub profile,
    owns gender,
    owns language,
    owns email,
    owns phone,
    owns relationship-status,
    owns page-visibility,
    owns post-visibility,
    plays birth:born,
    plays friendship:friend,
    plays family:relative,
    plays parentship:parent,
    plays parentship:child,
    plays siblingship:sibling,
    plays relationship:partner,
    plays engagement:fiance,
    plays marriage:spouse,
    plays employment:employee,
    plays education:attendee;

  relation birth,
    relates born,
    owns birth-date,
    plays location:located;

  relation social-relation @abstract,
    relates related @card(2);

  relation friendship sub social-relation,
    relates friend as related @card(2);

  relation family sub social-relation,
    relates relative as related @card(2);

  relation parentship sub family,
    relates parent as relative,
    relates child as relative;

  relation siblingship sub family,
    relates sibling as relative @card(2);

  relation relationship sub social-relation,
    relates partner as related @card(2),
    owns start-date;

  relation engagement sub relationship,
    relates fiance as partner @card(2),
    owns engagement-date,
    plays location:located;

  relation marriage sub relationship,
    relates spouse as partner @card(2),
    owns marriage-date,
    plays location:located;

  entity organization sub profile,
    owns tag @card(0..),
    plays employment:employer;

  entity company sub organization;
  entity charity sub organization;

  entity educational-institute sub organization,
    plays education:institute;

  entity school sub educational-institute;
  entity college sub educational-institute;
  entity university sub educational-institute;

  relation employment,
    relates employer,
    relates employee,
    owns start-date,
    owns end-date,
    owns description;

  relation education,
    relates institute,
    relates attendee,
    owns start-date,
    owns end-date,
    owns description;

  entity group sub page,
    owns group-id,
    owns tag @card(0..),
    owns page-visibility,
    owns post-visibility,
    plays group-membership:group;

  relation group-membership,
    relates group,
    relates member,
    owns rank,
    owns badge,
    owns start-timestamp,
    owns end-timestamp;

  entity post @abstract, sub content,
    owns post-id,
    owns post-text,
    owns creation-timestamp,
    owns language,
    owns tag @card(0..),
    owns post-visibility,
    plays posting:post,
    plays sharing:original-post,
    plays commenting:parent,
    plays reaction:parent,
    plays location:located,
    plays viewing:viewed;

  entity text-post sub post;

  entity share-post sub post,
    plays sharing:share-post;

  entity image-post sub post,
    owns post-image;

  entity video-post sub post,
    owns post-video;

  entity live-video-post sub video-post;

  entity poll-post sub post,
    owns question,
    owns answer @card(0..),
    plays response:poll;

  entity comment sub content,
    owns comment-id,
    owns comment-text,
    owns creation-timestamp,
    owns tag @card(0..),
    plays commenting:comment,
    plays commenting:parent,
    plays reaction:parent;

  relation interaction @abstract,
    relates subject,
    relates content;

  relation viewing sub interaction,
    relates viewer as subject,
    relates viewed as content;

  relation content-engagement @abstract, sub interaction,
    relates author as subject;

  relation posting sub content-engagement,
    relates page as content,
    relates post;

  relation sharing sub content-engagement,
    relates original-post as content,
    relates share-post;

  relation commenting sub content-engagement,
    relates parent as content,
    relates comment;

  relation reaction sub content-engagement,
    relates parent as content,
    owns emoji,
    owns creation-timestamp;

  relation response sub content-engagement,
    relates poll as content,
    owns answer,
    owns creation-timestamp;

  relation following,
    relates follower,
    relates page;

  relation subscription,
    relates subscriber,
    relates content;

  entity place,
    owns place-id,
    owns name,
    plays location:place;

  entity region sub place,
    plays region-location:parent-region,
    plays region-location:child-region,
    plays country-location:region;

  entity country sub place,
    owns language @card(0..),
    plays country-location:country,
    plays state-location:country,
    plays city-location:parent,
    plays landmark-location:parent;

  entity state sub place,
    plays state-location:state,
    plays city-location:parent,
    plays landmark-location:parent;

  entity city sub place,
    plays city-location:city,
    plays landmark-location:parent;

  entity landmark sub place,
    owns lattitude,
    owns longitude,
    plays landmark-location:landmark;

  relation location,
    relates place,
    relates located;

  relation region-location sub location,
    relates parent-region as place,
    relates child-region as located;

  relation country-location sub location,
    relates region as place,
    relates country as located;

  relation state-location sub location,
    relates country as place,
    relates state as located;

  relation city-location sub location,
    relates parent as place,
    relates city as located;

  relation landmark-location sub location,
    relates parent as place,
    relates landmark as located;

  attribute id @abstract, value string;
  attribute page-id  @abstract, sub id;
  attribute username sub page-id;
  attribute group-id sub page-id;
  attribute post-id sub id;
  attribute comment-id sub id;
  attribute place-id sub id;

  attribute name, value string;
  attribute gender, value string @regex("^(male|female|other)$");
  attribute language, value string;
  attribute email, value string;
  attribute phone, value string;
  attribute relationship-status, value string @regex("^(single|relationship|engaged|married|complicated)$");
  attribute lattitude, value double;
  attribute longitude, value double;

  attribute event-date @abstract, value datetime;
  attribute start-date sub event-date;
  attribute end-date sub event-date;
  attribute exact-date @abstract, sub event-date;
  attribute birth-date sub exact-date;
  attribute engagement-date sub exact-date;
  attribute marriage-date sub exact-date;

  attribute payload @abstract, value string;
  attribute text-payload @abstract, sub payload;
  attribute media-payload @abstract, sub payload;
  attribute image-payload @abstract, sub media-payload;
  attribute video-payload @abstract, sub media-payload;
  attribute bio sub text-payload;
  attribute description sub text-payload;
  attribute profile-picture sub image-payload;
  attribute post-text sub text-payload;
  attribute post-image sub image-payload;
  attribute post-video sub video-payload;
  attribute question sub text-payload;
  attribute answer sub text-payload;
  attribute comment-text sub text-payload;

  attribute tag, value string;
  attribute rank, value string @regex("^(member|moderator|admin|owner)$");
  attribute emoji, value string @regex("^(like|love|funny|surprise|sad|angry)$");
  attribute badge, value string;

  attribute creation-timestamp, value datetime;
  attribute start-timestamp, value datetime;
  attribute end-timestamp, value datetime;

  attribute visibility @abstract, value string;
  attribute page-visibility sub visibility, value string @regex("^(public|private)$");
  attribute post-visibility sub visibility, value string @regex("^(default|public|private)$");

  attribute is-visible, value boolean;
  attribute is-active, value boolean;
  attribute can-publish, value boolean;

# Transitively get all parent places of a place
fun all_parent_places($place: place) -> { place }:
  match
    { 
      location (located: $place, place: $parent);
    } or {
      location (located: $place, place: $middle);
      let $parent in all_parent_places($middle);
    };
  return { $parent };

# Transitively get all child places of a place
fun all_child_places($place: place) -> { place }:
    match
      $child isa place;
      { 
        location (located: $child, place: $place);
      } or {
        location (located: $middle, place: $place);
        let $child in all_child_places($middle);
      };
  return { $child };

# Transitively get child places of a place up to a given depth
fun child_places($place: place, $depth: integer) -> { place }:
    match
      $child isa place;
      $depth > 0;
      { 
        location (located: $child, place: $place);
      } or {
        location (located: $middle, place: $place);
        let $next_depth = $depth - 1;
        let $child in child_places($middle, $next_depth);
      };
  return { $child };

fun parent_places_linked_list($place: place) -> { place, place }:
  match
    { 
      location (located: $place, place: $parent);
      $child is $place;
    } or {
      location (located: $place, place: $middle);
      let $parent, $child in parent_places_linked_list($middle);
    };
  return { $parent, $child };

fun located_in_transitive($place: place, $location: place) -> place:
  match
    {
      $location is $place;
      $parent is $place;
    } or {
      location (located: $place, place: $parent);
      let $_ = located_in_transitive($parent, $location);
    };
  return first $parent;
